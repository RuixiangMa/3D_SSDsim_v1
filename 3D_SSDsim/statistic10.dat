parameter file: page.parameters
trace file: example.ascii
-----------------------parameter file----------------------
#parameter file
dram capacity = 131074;     #the unit is B
chip number[0] = 1;
chip number[1] = 1;
chip number[2] = 0;
chip number[3] = 0;
chip number[4] = 0;
chip number[5] = 0;
chip number[6] = 0;
chip number[7] = 0;
chip number[8] = 0;
chip number[9] = 0;
chip number[10] = 0;
chip number[11] = 0;
chip number[12] = 0;
chip number[13] = 0;
chip number[14] = 0;
chip number[15] = 0;
chip number[16] = 0;
chip number[17] = 0;
chip number[18] = 0;
channel number = 2;   #the number of channel
chip number = 2;
die number = 2;      
plane number = 2;
block number = 1024;
page number = 64;
subpage page = 4;
page capacity = 2048;
subpage capacity = 512;
t_PROG = 200000;             #the unit is ns
t_DBSY = 50;
t_BERS = 1500000;
t_CLS = 12;
t_CLH = 5;
t_CS = 20;
t_CH = 5;
t_WP = 12;
t_ALS = 12;
t_ALH = 5;
t_DS = 12;
t_DH = 5;
t_WC = 25;
t_WH = 10;
t_ADL = 70;
t_R = 20000;
t_AR = 10;
t_CLR = 10;
t_RR = 20;
t_RP = 12;
t_WB = 100;
t_RC = 25;
t_REA = 30;
t_CEA = 45;
t_RHZ = 100;
t_CHZ = 30;
t_RHOH = 15;
t_RLOH = 5;
t_COH = 15;
t_REH = 10;
t_IR = 0;
t_RHW = 100;
t_WHR = 60;
t_RST = 5000;
erase limit=100000;                          #record the erasure number of block
address mapping=1;                    #mapping schemes，1：page；2：block；3：fast
wear leveling=1;                      #WL算法
gc=1;                                 #记录gc策略
overprovide=0.20;
gc threshold=0.10;                    #当达到这个阈值时，开始GC操作，在主动写策略中，开始GC操作后可以临时中断GC操作，服务新到的请求；在普通策略中，GC不可中断
buffer management=0;                  #表示哪种buffer的功能
scheduling algorithm=1;               #记录使用哪种调度算法，1:FCFS
gc hard threshold=0.10;          #普通策略中用不到该参数，只有在主动写策略中，当满足这个阈值时，GC操作不可中断
allocation=0;                   #确定分配方式，0表示动态分配，1表示静态分配
dynamic_allocation=0;           #记录在采用哪种动态分配方式，0表示全动态，1表示channel定package，die，plane动态，2表示channel，package，die定plane动态
advanced command=20;             #是否使用高级命令，0表示不使用。利用二进制01分别表示random(00001)，copyback(00010)，two-plane-program(00100)，interleave(01000),two-plane-read(10000)是否使用，全部使用是11111，既31；
advanced command priority2=0;    #0表示interleave优先级高于two plane，1表示two plane优先级高于interleave
greed CB command=0;            #表示是否贪婪地使用copyback高级命令，0表示否，1表示是贪婪地使用
greed MPW command=1;            #表示是否贪婪地使用multi-plane write高级命令，0表示否，1表示是贪婪地使用
aged=1;                         #1表示需要将这个SSD变成aged，0表示需要将这个SSD保持non-aged
aged ratio=0.5;                #表示为了使SSD变成aged的SSD，需要将SSD中提前置为失效的比率
-----------------------simulation output----------------------
the 0 channel, 0 chip, 0 die, 0 plane has :           107 erase operations
the 0 channel, 0 chip, 0 die, 1 plane has :           106 erase operations
the 0 channel, 0 chip, 1 die, 0 plane has :            87 erase operations
the 0 channel, 0 chip, 1 die, 1 plane has :            87 erase operations
the 1 channel, 0 chip, 0 die, 0 plane has :           100 erase operations
the 1 channel, 0 chip, 0 die, 1 plane has :           100 erase operations
the 1 channel, 0 chip, 1 die, 0 plane has :            93 erase operations
the 1 channel, 0 chip, 1 die, 1 plane has :            93 erase operations


---------------------------statistic data---------------------------
min lsn:           132
max lsn:       1002411
read count:         14994
program count:         25941                        include the flash write count leaded by read requests
the read operation leaded by un-covered update count:           758
erase count:           773
direct erase count:           773
multi-plane program count:          5303
multi-plane read count:           427
write flash count:         19480
read request count:          4077
write request count:          5922
read request average size:     12.187195
write request average size:      9.841576
read request average response time:           160913
write request average response time:           200179
buffer read hits:          1126
buffer read miss:           123
buffer write hits:         14407
buffer write miss:         32682
erase:           773
